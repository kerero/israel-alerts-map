{"version":3,"sources":["HeatMap.tsx","BarChart.tsx","App.tsx","data/index.ts","index.tsx"],"names":["AlertsHeatMap","props","useState","latitude","longitude","zoom","viewport","setViewport","width","height","maxZoom","minZoom","mapStyle","onViewportChange","mapboxApiAccessToken","process","type","data","geoData","paint","property","stops","chartOptions","maintainAspectRatio","indexAxis","elements","bar","borderWidth","responsive","plugins","legend","position","title","display","text","labelsPlugin","id","afterDraw","chart","ctx","font","fillStyle","textAlign","textBaseline","config","datasets","forEach","dataset","dataArray","_metasets","index","fillText","x","y","AlertsBarChart","alertData","Chart","register","active","value","set","contentRef","useRef","splicedAlertData","slice","chartData","labels","map","o","label","backgroundColor","borderColor","className","onClick","e","currentTarget","classList","toggle","content","current","style","maxHeight","scrollHeight","ref","Object","keys","length","options","App","alertsDateRange","end","Date","localAlertsData","alertDate","start","oneWeekBack","setDate","getDate","onChange","alertsHistory","values","filter","alert","alertsCount","name","split","replaceAll","replace","includes","loadAlertData","failedMappings","successfulMapping","cities","JSON","parse","stringify","citiesGeoJson","l","geoCity","features","find","c","properties","count","prepareGeoData","sortedAlerts","entries","sort","a","b","v","format","maxDate","minDate","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de502f8d.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport MapGL, { Source, Layer } from 'react-map-gl'\n\nexport default function AlertsHeatMap(props) {\n  const [viewport, setViewport] = useState({\n    latitude: 31.57566616888998,\n    longitude: 34.69456108481244,\n    zoom: 8.5,\n  })\n  return (\n    <MapGL\n      {...viewport}\n      width=\"100%\"\n      height=\"100vh\"\n      maxZoom={11}\n      minZoom={7.5}\n      mapStyle=\"mapbox://styles/mapbox/light-v10\"\n      onViewportChange={setViewport}\n      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n    >\n      <Source type=\"geojson\" data={props.geoData}>\n        <Layer {...{\n          type: 'heatmap',\n          paint: {\n            'heatmap-weight': {\n              property: 'count',\n              type: 'exponential',\n              stops: [\n                [1, 0],\n                [62, 1],\n              ],\n            },\n            'heatmap-radius': 30 + (viewport.zoom - 8) * 10,\n            'heatmap-opacity': 0.5,\n          },\n        }}\n        />\n      </Source>\n    </MapGL>\n  )\n}\n","/* eslint-disable no-underscore-dangle */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React, { useState, useRef } from 'react'\nimport { Bar, Chart } from 'react-chartjs-2'\nimport './BarCharts.css'\n\nconst DATA_LENGTH_LIMIT = 50\nconst chartOptions = {\n  maintainAspectRatio: false,\n  indexAxis: 'y',\n  elements: {\n    bar: {\n      borderWidth: 2,\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      position: 'top',\n    },\n    title: {\n      display: true,\n      text: `Alerts per City (Top ${DATA_LENGTH_LIMIT})`,\n    },\n  },\n}\n\nconst labelsPlugin = {\n  id: 'labelsPlugin',\n  afterDraw: (chart) => {\n    // @ts-ignore\n    const { ctx } = chart\n    ctx.font = '12px Verdana'\n    ctx.fillStyle = '#000000'\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'bottom'\n    // @ts-ignore\n    chart.config.data.datasets.forEach((dataset) => {\n      if (dataset.type === 'bar') {\n        const dataArray = dataset.data\n        chart._metasets[0].data.forEach((bar, index) => {\n          ctx.fillText(dataArray[index], bar.x + 10, bar.y + 8)\n        })\n      }\n    })\n  },\n}\n\nexport default function AlertsBarChart({ alertData }) {\n  // @ts-ignore\n  Chart.register(labelsPlugin)\n  const [value, set] = useState({ active: false })\n  const contentRef = useRef<HTMLDivElement>()\n  const splicedAlertData = alertData.slice(0, 100)\n  const chartData = {\n    labels: splicedAlertData.map((o) => o[0]),\n    datasets: [\n      {\n        type: 'bar',\n        label: '# of Alerts',\n        data: splicedAlertData.map((o) => o[1]),\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.2)',\n          'rgba(54, 162, 235, 0.2)',\n          'rgba(255, 206, 86, 0.2)',\n          'rgba(75, 192, 192, 0.2)',\n          'rgba(153, 102, 255, 0.2)',\n          'rgba(255, 159, 64, 0.2)',\n        ],\n        borderColor: [\n          'rgba(255, 99, 132, 1)',\n          'rgba(54, 162, 235, 1)',\n          'rgba(255, 206, 86, 1)',\n          'rgba(75, 192, 192, 1)',\n          'rgba(153, 102, 255, 1)',\n          'rgba(255, 159, 64, 1)',\n        ],\n        borderWidth: 1,\n      },\n    ],\n  }\n\n  return (\n    <div className=\"rootContainer\">\n      <div\n        className={`buttonContainer collapsible ${value.active ? 'active' : ''}`}\n        onClick={(e) => {\n          e.currentTarget.classList.toggle('change')\n          set({ active: !value.active })\n          const content = contentRef.current\n          if (content) {\n            if (content.style.maxHeight) {\n              (content as any).style.maxHeight = null\n            } else {\n              content.style.maxHeight = `${content.scrollHeight}px`\n              content.style.height = `${content.scrollHeight}px`\n            }\n          }\n        }}\n      >\n        <div className={`baseLine ${value.active ? 'active' : ''}`} />\n        <div className=\"barsContainer\">\n          <div className={`bar1 ${value.active ? 'active' : ''}`} />\n          <div className={`bar2 ${value.active ? 'active' : ''}`} />\n          <div className={`bar3 ${value.active ? 'active' : ''}`} />\n        </div>\n\n      </div>\n      <div className=\"chartContainer content\" ref={contentRef as React.RefObject<HTMLDivElement>}>\n        <div className=\"chart\" style={{ height: `${Object.keys(splicedAlertData).length * 20 + 300}px` }}>\n          <Bar\n            plugins={[labelsPlugin]}\n            data={chartData}\n            options={chartOptions}\n            type=\"\"\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport DateRange from '@wojtekmaj/react-daterange-picker'\nimport AlertsHeatMap from './HeatMap'\nimport './App.css'\nimport { getAlertsDateRange, loadAlertData, prepareGeoData } from './data'\nimport BarChart from './BarChart'\n\nexport default function App() {\n  const alertsDateRange = getAlertsDateRange()\n  const oneWeekBack = new Date(alertsDateRange.end)\n  oneWeekBack.setDate(oneWeekBack.getDate() - 6) // get last week\n\n  const [value, onChange] = useState([oneWeekBack, alertsDateRange.end])\n\n  const alertData = loadAlertData(value[0], value[1])\n  const geoData = prepareGeoData(alertData)\n  const sortedAlerts = Object.entries(alertData).sort((a, b) => b[1] - a[1])\n\n  return (\n    <div>\n      <div className=\"absolutePosition\">\n        <div className=\"flex\">\n          <BarChart alertData={sortedAlerts} />\n          <div className=\"datePickerContainer\">\n            <DateRange\n              className=\"datePicker\"\n              onChange={(v) => {\n                if (v && v[0] && v[1]) {\n                  onChange(v)\n                } else {\n                  onChange([alertsDateRange.start, alertsDateRange.end])\n                }\n              }}\n              value={value}\n              format=\"dd/MM/yy\"\n              maxDate={alertsDateRange.end}\n              minDate={alertsDateRange.start}\n            />\n          </div>\n        </div>\n        <p className=\"infoText\">{geoData.successfulMapping + geoData.failedMappings} Alerts</p>\n        <p className=\"infoText tooltip\">\n          ⚠\n          <span className=\"tooltiptext\">Failed to map {geoData.failedMappings} alerts</span>\n        </p>\n      </div>\n      <AlertsHeatMap geoData={geoData.data} />\n    </div>\n  )\n}\n","/* eslint-disable no-param-reassign */\n\nimport citiesGeoJson from './cities.geo.json'\nimport localAlertsData from './alertsHistory.json'\n\nexport function getAlertsDateRange() {\n  return {\n    end: new Date(localAlertsData[0].alertDate),\n    start: new Date(localAlertsData[localAlertsData.length - 1].alertDate),\n  }\n}\n\nexport function loadAlertData(start: Date, end: Date): Record<string, number> {\n  // const LANG = 'he'\n  // const url = `https://www.oref.org.il//Shared/Ajax/GetAlarmsHistory.aspx?lang=${LANG}&mode=3`\n  // const corsWrapper = `http://www.whateverorigin.org/get?url=${url}`\n\n  // !! load data locally, oref.org.il is only accessible within israel\n  // May use `npm run updateAlertHistory` to update local data\n  let alertsHistory: any[] = Object.values(localAlertsData) // (await axios.get(corsWrapper))\n\n  // filter relevant dates\n  if (start && end) {\n    alertsHistory = alertsHistory.filter((alert) => {\n      const alertDate = new Date(alert.alertDate)\n      return alertDate >= start && alertDate <= end\n    })\n  }\n\n  const alertsCount = {}\n  alertsHistory.forEach((e: any) => {\n    let name: string = e.data || '' // avert bad data\n\n    // Try to standardize cities names\n    name = name.split(', ')[0]\n      .replaceAll(\"''\", '\"')\n      .replace(' והפזורה', '')\n    if (name.includes('אשקלון')) name = 'אשקלון'\n\n    if (alertsCount[name]) {\n      alertsCount[name] += 1\n    } else {\n      alertsCount[name] = 1\n    }\n  })\n\n  return alertsCount\n}\n\nexport function prepareGeoData(alertData: object):\n{ data: object; failedMappings: number; successfulMapping: number } {\n  let failedMappings = 0\n  let successfulMapping = 0\n  const cities = JSON.parse(JSON.stringify(citiesGeoJson))\n\n  Object.keys(alertData).forEach((l) => {\n    const geoCity = cities.features.find((c) => c.properties.name === l\n        || c.properties.name.replaceAll(' ', '').split('-')[0] === l.replaceAll(' ', '') // try to map cities with different hyphen and spacing arrangements\n        || c.properties.name === l.split(' ו')[0] // Try to map coupled cities\n        || c.properties.name === l.split(' תעשייה ')[1] /* Try to map industrial parks/zones */\n        || c.properties.name.replaceAll(' ', '') === l.replaceAll(' ', '').split('-')[0]) as any\n    if (geoCity) {\n      geoCity.properties.count = alertData[l]\n      successfulMapping += alertData[l]\n    } else {\n      failedMappings += alertData[l]\n    }\n  })\n\n  cities.features = cities.features.filter((c: any) => c.properties.count)\n\n  return { data: cities, failedMappings, successfulMapping }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}